import sys
import os

from neural_network.data_gen import down_and_out_barrier_put_data_gen

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
import numpy as np
import tensorflow as tf
from pricer.analytical import BlackScholesCall, BlackScholesPut
from pricer.pde_solver import AmericanBlackScholesPutPDE, BarrierUpAndOutCallPDE, BarrierUpAndOutPutPDE
from data_gen import bs_call_data_gen, bs_put_data_gen, american_bs_put_data_gen, \
    up_and_out_barrier_call_data_gen
from model import PricerNet
from config_base import PipeLineConfig, DataGenConfig, ModelConfig

blackscholes_call_config = PipeLineConfig(
    pricing_model=BlackScholesCall,
    data_gen_func=bs_call_data_gen,
    data=DataGenConfig(
        underlier_price=np.arange(50, 400, 0.01),
        expiry=np.arange(7/365, 400/365, 1/365),
        interest_rate=np.arange(0.01, 0.11, 0.01),
        volatility=np.arange(0.05, 0.31, 0.01),
        # strike=np.linspace(50, 150, 1000),
        strike_lower_bound_pct=0.75,
        strike_upper_bound_pct=1.25,
        strike_sampling_std_pct=0.2,
        variables=["underlier_price", "strike", "interest_rate", "volatility", "expiry"],
        parameter_variables=["strike", "volatility", "interest_rate"],
        derived_variables={
            "price": lambda x: x.price(),
            "delta": lambda x: x.delta(),
            "gamma": lambda x: x.gamma(),
            "vega": lambda x: x.vega(),
            "theta": lambda x: x.theta(),
            "rho": lambda x: x.rho(),
        },
        normalize=True,
        n=10 ** 6,
        m=10 ** 4,
        x_step=100,
        t_step=100,
        seed=42,
    ),
    test_data=DataGenConfig(
        underlier_price=np.arange(100, 300, 0.01),
        expiry=np.arange(30 / 365, 273 / 365, 1 / 365),
        interest_rate=np.arange(0.04, 0.09, 0.01),
        volatility=np.arange(0.1, 0.21, 0.01),
        # strike=np.linspace(50, 150, 1000),
        strike_lower_bound_pct=0.8,
        strike_upper_bound_pct=1.2,
        strike_sampling_std_pct=0.15,
        variables=["underlier_price", "strike", "interest_rate", "volatility", "expiry"],
        parameter_variables=["strike", "volatility", "interest_rate"],
        derived_variables={
            "price": lambda x: x.price(),
            "delta": lambda x: x.delta(),
            "gamma": lambda x: x.gamma(),
            "vega": lambda x: x.vega(),
            "theta": lambda x: x.theta(),
            "rho": lambda x: x.rho(),
        },
        normalize=True,
        n=10 ** 5,
        m=10 ** 3,
        x_step=100,
        t_step=100,
        seed=100,
    ),
    model=ModelConfig(
        model_class=PricerNet,
        neuron_per_layer=32,
        layer_number=5,
        hidden_layer_activation="leaky_relu",
        learning_rate=0.001,
        batch_size=2 ** 10,
        epochs=15,
        optimizer=tf.keras.optimizers.Nadam,
        l1=0.0,
        l2=0.0,
        dropout=0.05,
        input_variables=["underlier_price", "interest_rate", "volatility", "expiry"],
        target_variables={"price": "relu"},
        greeks={
            "underlier_price": [{"name": "delta", "order": "first"}, {"name": "gamma", "order": "second"}],
            "expiry": [{"name": "theta", "order": "first"}],
            "volatility": [{"name": "vega", "order": "first"}],
            "interest_rate": [{"name": "rho", "order": "first"}],
        },
        tensorflow_greeks={
            "delta": 0,
            "rho": 1,
            "vega": 2,
            "theta": 3
        },
        jacobian_batch_size=10 ** 5,
    ),
    regenerate_data=False,
)

blackscholes_put_config = PipeLineConfig(
    pricing_model=BlackScholesPut,
    data_gen_func=bs_put_data_gen,
    data=DataGenConfig(
        underlier_price=np.arange(50, 400, 0.01),
        expiry=np.arange(7 / 365, 400 / 365, 1 / 365),
        interest_rate=np.arange(0.01, 0.11, 0.01),
        volatility=np.arange(0.05, 0.31, 0.01),
        strike_lower_bound_pct=0.75,
        strike_upper_bound_pct=1.25,
        strike_sampling_std_pct=0.2,
        variables=["underlier_price", "strike", "interest_rate", "volatility", "expiry"],
        derived_variables={
            "price": lambda x: x.price(),
            "delta": lambda x: x.delta(),
            "gamma": lambda x: x.gamma(),
            "vega": lambda x: x.vega(),
            "theta": lambda x: x.theta(),
            "rho": lambda x: x.rho(),
        },
        normalize=True,
        n=10 ** 6,
        seed=42,
    ),
    test_data=DataGenConfig(
        underlier_price=np.arange(100, 300, 0.01),
        expiry=np.arange(30 / 365, 273 / 365, 1 / 365),
        interest_rate=np.arange(0.04, 0.09, 0.01),
        volatility=np.arange(0.1, 0.21, 0.01),
        strike_lower_bound_pct=0.8,
        strike_upper_bound_pct=1.2,
        strike_sampling_std_pct=0.15,
        variables=["underlier_price", "strike", "interest_rate", "volatility", "expiry"],
        derived_variables={
            "price": lambda x: x.price(),
            "delta": lambda x: x.delta(),
            "gamma": lambda x: x.gamma(),
            "vega": lambda x: x.vega(),
            "theta": lambda x: x.theta(),
            "rho": lambda x: x.rho(),
        },
        normalize=True,
        n=10 ** 5,
        seed=100,
    ),
    model=ModelConfig(
        model_class=PricerNet,
        neuron_per_layer=32,
        layer_number=5,
        hidden_layer_activation="leaky_relu",
        learning_rate=0.001,
        batch_size=2 ** 10,
        epochs=15,
        optimizer=tf.keras.optimizers.Nadam,
        l1=0.0,
        l2=0.0,
        dropout=0.05,
        input_variables=["underlier_price", "interest_rate", "volatility", "expiry"],
        target_variables={"price": "relu"},
        greeks={
            "underlier_price": [{"name": "delta", "order": "first"}, {"name": "gamma", "order": "second"}],
            "expiry": [{"name": "theta", "order": "first"}],
            "volatility": [{"name": "vega", "order": "first"}],
            "interest_rate": [{"name": "rho", "order": "first"}],
        },
        tensorflow_greeks={
            "delta": 0,
            "rho": 1,
            "vega": 2,
            "theta": 3
        },
        jacobian_batch_size=10 ** 5,
    ),
    regenerate_data=False,
)

american_black_scholes_put_config = PipeLineConfig(
    pricing_model=AmericanBlackScholesPutPDE,
    data_gen_func=american_bs_put_data_gen,
    data=DataGenConfig(
        underlier_price=np.array([1.0, 400.0]),
        interest_rate=np.arange(0.01, 0.11, 0.01),
        volatility=np.arange(0.05, 0.31, 0.01),
        expiry=np.arange(1, 400) / 365,
        strike=np.arange(10.0, 350.0),
        strike_lower_bound_pct=0.75,
        strike_upper_bound_pct=1.25,
        price_points_sampling_std_pct=0.25,
        variables=["underlier_price", "strike", "interest_rate", "volatility", "expiry"],
        derived_variables={
            "price": lambda x, points: x.price(points),
            "delta": lambda x, points: x.delta(points),
            "gamma": lambda x, points: x.gamma(points),
            "vega": lambda x, points: x.vega(points),
            "theta": lambda x, points: x.theta(points),
            "rho": lambda x, points: x.rho(points),
        },
        normalize=True,
        n=10 ** 6,
        m=10 ** 4,
        seed=42,
        x_step=200,
        t_step=100,
    ),
    test_data=DataGenConfig(
        underlier_price=np.array([25.0, 350.0]),
        interest_rate=np.arange(0.04, 0.9, 0.01),
        volatility=np.arange(0.1, 0.21, 0.01),
        expiry=np.arange(30, 273) / 365,
        strike=np.arange(50.0, 275.0),
        strike_lower_bound_pct=0.8,
        strike_upper_bound_pct=1.2,
        price_points_sampling_std_pct=0.15,
        variables=["underlier_price", "strike", "interest_rate", "volatility", "expiry"],
        derived_variables={
            "price": lambda x, points: x.price(points),
            "delta": lambda x, points: x.delta(points),
            "gamma": lambda x, points: x.gamma(points),
            "vega": lambda x, points: x.vega(points),
            "theta": lambda x, points: x.theta(points),
            "rho": lambda x, points: x.rho(points),
        },
        normalize=True,
        n=10 ** 5,
        m=10 ** 2,
        seed=100,
        x_step=200,
        t_step=100,
    ),
    model=ModelConfig(
        model_class=PricerNet,
        neuron_per_layer=64,
        layer_number=2,
        hidden_layer_activation="tanh",
        learning_rate=0.0025,
        batch_size=10000,
        epochs=20,
        optimizer=tf.keras.optimizers.Nadam,
        l1=0.0,
        l2=0.0,
        dropout=0.0,
        input_variables=["underlier_price", "interest_rate", "volatility", "expiry"],
        target_variables={"price": "relu"},
        greeks={
            "underlier_price": [{"name": "delta", "order": "first"}, {"name": "gamma", "order": "second"}],
            "expiry": [{"name": "theta", "order": "first"}],
            "volatility": [{"name": "vega", "order": "first"}],
            "interest_rate": [{"name": "rho", "order": "first"}],
        },
        tensorflow_greeks={"delta": 0,
                           # "rho": 1, "vega": 2, "theta": 3
                           },
        jacobian_batch_size=10 ** 5,
    ),
    regenerate_data=False,
)

up_and_out_barrier_call_config = PipeLineConfig(
    pricing_model=BarrierUpAndOutCallPDE,
    data_gen_func=up_and_out_barrier_call_data_gen,
    data=DataGenConfig(
        underlier_price=np.array([1.0, 400.0]),
        interest_rate=np.arange(0.01, 0.11, 0.01),
        volatility=np.arange(0.05, 0.31, 0.01),
        expiry=np.arange(1, 400) / 365,
        strike=np.arange(10.0, 350.0),
        price_points_sampling_std_pct=0.15,
        barrier_distance_mean_pct=1.6,
        barrier_distance_min_pct=1.1,
        barrier_sampling_std_pct=0.25,
        variables=["underlier_price", "strike", "interest_rate", "volatility", "expiry", "barrier", "price"],
        derived_variables={
            # "price": lambda x, points: x.price(points),
            "delta": lambda x, points: x.delta(points),
            "gamma": lambda x, points: x.gamma(points),
            "vega": lambda x, points: x.vega(points),
            "theta": lambda x, points: x.theta(points),
            "rho": lambda x, points: x.rho(points),
        },
        normalize=True,
        n=10 ** 6,
        m=10 ** 4,
        seed=42,
        x_step=200,
        t_step=100,
    ),
    test_data=DataGenConfig(
        underlier_price=np.array([25.0, 350.0]),
        interest_rate=np.arange(0.04, 0.9, 0.01),
        volatility=np.arange(0.1, 0.21, 0.01),
        expiry=np.arange(30, 273) / 365,
        strike=np.arange(50.0, 275.0),
        price_points_sampling_std_pct=0.10,
        barrier_distance_mean_pct=1.4,
        barrier_distance_min_pct=1.1,
        barrier_sampling_std_pct=0.15,
        variables=["underlier_price", "strike", "interest_rate", "volatility", "expiry", "barrier", "price"],
        derived_variables={
            # "price": lambda x, points: x.price(points),
            "delta": lambda x, points: x.delta(points),
            "gamma": lambda x, points: x.gamma(points),
            "vega": lambda x, points: x.vega(points),
            "theta": lambda x, points: x.theta(points),
            "rho": lambda x, points: x.rho(points),
        },
        normalize=True,
        n=10 ** 5,
        m=10 ** 2,
        seed=100,
        x_step=200,
        t_step=100,
    ),
    model=ModelConfig(
        model_class=PricerNet,
        neuron_per_layer=64,
        layer_number=5,
        hidden_layer_activation="gelu",
        learning_rate=0.002,
        batch_size=2**12,
        epochs=15,
        optimizer=tf.keras.optimizers.Adam,
        l1=0.0,
        l2=0.0,
        dropout=0.05,
        input_variables=["underlier_price", "interest_rate", "volatility", "expiry", "barrier"],
        target_variables={"price": "relu"},
        greeks={
            "underlier_price": [{"name": "delta", "order": "first"}, {"name": "gamma", "order": "second"}],
            "expiry": [{"name": "theta", "order": "first"}],
            "volatility": [{"name": "vega", "order": "first"}],
            "interest_rate": [{"name": "rho", "order": "first"}],
        },
        tensorflow_greeks={
            "delta": 0,
            # "rho": 1,
            # "vega": 2,
            # "theta": 3
        },
        jacobian_batch_size=10 ** 5,
    ),
    regenerate_data=False,
)

# down_and_out_barrier_put_config = PipeLineConfig(
#     pricing_model=BarrierUpAndOutPutPDE,
#     data_gen_func=down_and_out_barrier_put_data_gen,
#     data=DataGenConfig(
#         underlier_price=np.array([1.0, 500.0]),
#         interest_rate=np.arange(0.01, 0.21, 0.01),
#         volatility=np.arange(0.1, 0.41, 0.01),
#         expiry=np.arange(30, 400) / 365,
#         strike=np.arange(10.0, 450.0),
#         price_points_sampling_std_pct=0.25,
#         barrier_distance_mean_pct=1.0,
#         barrier_distance_min_pct=0.5,
#         barrier_sampling_std_pct=0.25,
#         variables=["underlier_price", "strike", "interest_rate", "volatility", "expiry", "barrier"],
#         derived_variables={
#             "price": lambda x, points: x.price(points),
#             "delta": lambda x, points: x.delta(points),
#             "gamma": lambda x, points: x.gamma(points),
#             "vega": lambda x, points: x.vega(points),
#             "theta": lambda x, points: x.theta(points),
#             "rho": lambda x, points: x.rho(points),
#         },
#         normalize=True,
#         n=10 ** 6,
#         seed=42,
#     ),
#     test_data=DataGenConfig(
#         underlier_price=np.array([1.0, 500.0]),
#         interest_rate=np.arange(0.05, 0.16, 0.01),
#         volatility=np.arange(0.15, 0.36, 0.01),
#         expiry=np.arange(45, 365) / 365,
#         strike=np.arange(25.0, 400.0),
#         price_points_sampling_std_pct=0.25,
#         barrier_distance_mean_pct=1.0,
#         barrier_distance_min_pct=0.5,
#         barrier_sampling_std_pct=0.25,
#         variables=["underlier_price", "strike", "interest_rate", "volatility", "expiry", "barrier"],
#         derived_variables={
#             "price": lambda x, points: x.price(points),
#             "delta": lambda x, points: x.delta(points),
#             "gamma": lambda x, points: x.gamma(points),
#             "vega": lambda x, points: x.vega(points),
#             "theta": lambda x, points: x.theta(points),
#             "rho": lambda x, points: x.rho(points),
#         },
#         normalize=True,
#         n=10 ** 5,
#         seed=100,
#     ),
#     model=ModelConfig(
#         model_class=PricerNet,
#         neuron_per_layer=64,
#         layer_number=2,
#         hidden_layer_activation="relu",
#         learning_rate=0.001,
#         batch_size=2 ** 10,
#         epochs=10,
#         optimizer=tf.keras.optimizers.Nadam,
#         l1=0.0,
#         l2=0.0,
#         dropout=0.0,
#         input_variables=["underlier_price", "interest_rate", "volatility", "expiry", "barrier"],
#         target_variables={"price": "relu"},
#         greeks={
#             "underlier_price": [{"name": "delta", "order": "first"}, {"name": "gamma", "order": "second"}],
#             "expiry": [{"name": "theta", "order": "first"}],
#             "volatility": [{"name": "vega", "order": "first"}],
#             "interest_rate": [{"name": "rho", "order": "first"}],
#         },
#         tensorflow_greeks={"delta": 0, "rho": 1, "vega": 2, "theta": 3},
#         jacobian_batch_size=10 ** 5,
#     ),
#     regenerate_data=True,
# )
